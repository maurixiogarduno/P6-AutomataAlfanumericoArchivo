/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.io.File;
import java.util.Scanner;

/**
 *
 * @author @author mauricio
 */
public class Main extends javax.swing.JFrame {

    //String sym = "()*|01;";
    /* 0 y 1 -> Parentesis
    * 2 y 4 -> Operadores
    * 5 y 6 -> Operandos
    * 7 -> fin de linea ... ;
     */
    String symAB = "()*|ab;"; // Tipo 1: Numerica
    String sym01 = "()*|01;"; // Tipo 2: Alfabetica

    boolean existe0, existe1, existeA, existeB;
    int valor0, valor1, valorA, valorB;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        leerArchivo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Btn_limpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TxtA_tokens = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtA_validaciones = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        Btn_salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        Btn_limpiar.setText("Recargar");
        Btn_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_limpiarActionPerformed(evt);
            }
        });

        TxtA_tokens.setColumns(20);
        TxtA_tokens.setRows(5);
        jScrollPane1.setViewportView(TxtA_tokens);

        jLabel2.setText("Aviso sobre Caracteres: ");

        TxtA_validaciones.setColumns(20);
        TxtA_validaciones.setRows(5);
        jScrollPane2.setViewportView(TxtA_validaciones);

        jLabel3.setText("Aviso sobre La cadena: ");

        Btn_salir.setText("Salir");
        Btn_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Btn_limpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Btn_salir))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(25, 25, 25))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_salir)
                    .addComponent(Btn_limpiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Btn_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_limpiarActionPerformed
        // TODO add your handling code here:
        TxtA_tokens.setText("");
        TxtA_validaciones.setText("");

        leerArchivo();
    }//GEN-LAST:event_Btn_limpiarActionPerformed

    private void Btn_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_salirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_Btn_salirActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_limpiar;
    private javax.swing.JButton Btn_salir;
    private javax.swing.JTextArea TxtA_tokens;
    private javax.swing.JTextArea TxtA_validaciones;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void leerArchivo() {
        //URL path = this.getClass().getResource("/reportes/Ticked.jasper");

        // Fichero del que queremos leer
        File fichero = new File("/Users/Jedidian/Documents/GitHub/Java/P6-AutomataAlfanumericoArchivo/src/archivo/tokens.txt");
        Scanner s = null;

        try {
            // Leemos el contenido del fichero
            System.out.println("... Leemos el contenido del fichero ...");
            s = new Scanner(fichero);

            // Leemos linea a linea el fichero
            while (s.hasNextLine()) {
                String linea = s.nextLine(); 	// Guardamos la linea en un String

                //Ya que leemos la linea analizamos y separamos por cada ; 
                String[] tokens;
                tokens = linea.split(";");

                String cNueva = "";

                for (String token : tokens) {
                    //System.out.println(token);
                    String anterior = TxtA_tokens.getText();
                    String nueva = anterior + token + "\n";
                    TxtA_tokens.setText(nueva);

                    //Aqui va la magia de gerson
                    String cAnterior = TxtA_validaciones.getText();

                    boolean valido = true;
                    int tipo;

                    System.out.println("cadena: " + token);
                    tipo = llenar(token);
                    //valido = evaluarCadena(token);

//                    if (valido == true) {
//                        cNueva = cAnterior + " Cadena Valida" + "\n";
//                    } else {
//                        cNueva = cAnterior + " Cadena No valida" + "\n";
//                    }
                    if (tipo != -1) {

                        if (tipo == 1) {
                            System.out.println("tipo de cadena: Numerica");
                            //lbl_tipo.setText("0`s y 1`s");
                        } else {
                            System.out.println("tipo de cadena: alfabetica");
                            //lbl_tipo.setText("a`s y b`s");
                        }

                    } else {
                        System.out.println("Cadena Vacia: " + tipo);
                    }

                    System.out.println(" - - - - - - - - - - ");

                    valido = evaluarCadena(token, tipo);

                    if (valido == true) {
                        //TxtA_validaciones.setText("Cadena Valida");
                        cNueva = cAnterior + " Cadena Valida" + "\n";
                    } else {
                        //TxtA_validaciones.setText("Cadena  Invalida");
                        cNueva = cAnterior + " Cadena No valida" + "\n";
                    }

                    TxtA_validaciones.setText(cNueva);
                }
            }

        } catch (Exception ex) {
            System.out.println("Mensaje: " + ex.getMessage());
        } finally {
            // Cerramos el fichero tanto si la lectura ha sido correcta o no
            try {
                if (s != null) {
                    s.close();
                }
            } catch (Exception ex2) {
                System.out.println("Mensaje 2: " + ex2.getMessage());
            }
        }

    }

    public boolean evaluarCadena(String cadena, int tipo) {

        String simbolos = "";
        
        //Cadena numerica
        if(tipo == 1){
            System.out.println("Validacion de cadena numerica");
            simbolos = sym01;
        }//Cadena alfabetica
        else{
            System.out.println("Validacion de cadena numerica");
            simbolos = symAB;
        }
        
        boolean valido = true;

        if (!cadena.equalsIgnoreCase("")) {

            String nuevo = "";
            boolean encontrado = false;

            for (int i = 0; i < cadena.length(); i++) {

                char c = cadena.charAt(i);
                String actual = "";

                int pos = simbolos.indexOf(c);

                if (pos != -1) {
                    actual = c + " -> caracter valido \n";
                    encontrado = true;
                } else {
                    actual = c + " -> caracter NO valido \n";
                    encontrado = true;
                    valido = false;
                }

                nuevo = nuevo + actual + "\n";
                //TxtA_caracteres.setText( nuevo );
            }

        } else {
            //TxtA_validaciones.setText("La cadena esta vacia ...");
        }

        return valido;
    }
    
    public int llenar( String cadena ){
       
       int tipo = -1;
       //Llenado de Valores numericos de cada Operador
       valor0 = cadena.indexOf('0') ;
       valor1 = cadena.indexOf('1') ;
       valorA = cadena.indexOf('a') ;
       valorB = cadena.indexOf('b') ;
       
       // 0
       if( valor0 != -1){
           existe0 = true;
       }else{
           existe0 = false;
       }
       
       // 1
       if( valor1 != -1){
           existe1 = true;
       }else{
           existe1 = false;
       }
       
       //A
       if( valorA != -1){
           existeA = true;
       }else{
           existeA = false;
       }
       
       // B
       if( valorB != -1){
           existeB = true;
       }else{
           existeB = false;
       }
       System.out.println("existeO: "+ existe0 + " Valor0; " + valor0);
       System.out.println("existe1: "+ existe1 + " Valor1; " + valor1);
       System.out.println("existeA: "+ existeA + " ValorA; " + valorA);
       System.out.println("existeB: "+ existeB + " ValorB; " + valorB);
       
       tipo = revisarValores( existe0, existe1, existeA, existeB);
       
       return tipo;
   }
    
   public int revisarValores(boolean c0, boolean c1, boolean cA, boolean cB){
       int tipo = -1;
       
       //vacio
       if( (c0 ==false) && (c1 ==false) && (cA ==false) && (cB ==false) ){
           tipo = -1;
       }// inicio con A o B
       else if( ((c0 ==false) && (c1 ==false) && (cA ==false) && (cB ==true))  ||
                ((c0 ==false) && (c1 ==false) && (cA ==true) && (cB ==false)) || 
                ((c0 ==false) && (c1 ==false) && (cA ==true) && (cB ==true)) ){
           
           tipo = 2;
           
       }// inicio con 0 o 1 
       else if( ((c0 ==false) && (c1 ==true) && (cA ==false) && (cB ==false))  ||
                ((c0 ==true) && (c1 ==false) && (cA ==false) && (cB ==false)) || 
                ((c0 ==true) && (c1 ==true) && (cA ==false) && (cB ==false)) ){
           
           tipo = 1;
           
       }// Numero vs Letra
       else if(  ((c0 ==false) && (c1 ==true) && (cA ==false) && (cB ==true)) ||
                 ((c0 ==false) && (c1 ==true) && (cA ==true) && (cB ==false)) || 
                 ((c0 ==true) && (c1 ==false) && (cA ==false) && (cB ==true)) || 
                 ((c0 ==true) && (c1 ==false) && (cA ==true) && (cB ==false)) ){
           
           // C1 vs A, B
           if( (c1== true) && (cB == true)){
               System.out.println("Comparacion entre 1 y B");
               tipo = compararNumeroLetra( valor1, valorB );
           }
           else if( (c1== true) && (cA == true)){
               System.out.println("Comparacion entre 1 y A");
               tipo = compararNumeroLetra( valor1, valorA ) ;
           }
           //C0 vs, A,B
           else if( (c0== true) && (cB == true)){
               System.out.println("Comparacion entre 0 y B");
               tipo = compararNumeroLetra( valor0, valorB );
           }
           else if( (c0== true) && (cA == true)){
               System.out.println("Comparacion entre 0 y A");
               tipo = compararNumeroLetra( valor0, valorA );
           }
       }// Numero vs 2Letras
       else if(  ((c0 ==false) && (c1 ==true) && (cA ==true) && (cB ==true)) ||
                 ((c0 ==true) && (c1 ==false) && (cA ==true) && (cB ==true)) ){
           
           // C1 vs A, B
           if( (c1== true) && (cA == true) && (cB == true) ){
               System.out.println("Comparacion entre 1, A y B");
               tipo = compararNumero2Letras( valor1, valorA, valorB );
           }// C0 vs A, B
           else if( (c1== true) && (cA == true) && (cB == true) ){
               System.out.println("Comparacion entre 0, A y B");
               tipo = compararNumero2Letras( valor0, valorA, valorB );
           }
  
       }// Letra vs 2Numeros
       else if(  ((c0 ==true) && (c1 ==true) && (cA ==false) && (cB ==true)) ||
                 ((c0 ==true) && (c1 ==true) && (cA ==true) && (cB ==false)) ){
           
           //B vs C0, C1
           if( (c0== true) && (c1 == true) && (cB == true) ){
               System.out.println("Comparacion entre 1, A y B");
               tipo = compararLerta2Numeros( valorB, valor0, valor1 );
           }//A vs C0, C1
           else if( (c0== true) && (c1 == true) && (cA == true) ){
               System.out.println("Comparacion entre 0, A y B");
               tipo = compararLerta2Numeros( valorA, valor0, valor1 );
           }
  
       }// 2Letras vs 2Numeros
       else if(  ((c0 ==true) && (c1 ==true) && (cA ==true) && (cB ==true)) ){

            System.out.println("Comparacion entre 0, 1, A y B");
            //tipo = compararTodo( valor0, valor1, valorA, valorB );
       }
       
       return tipo;
   }
   
   public int compararNumeroLetra( int numero, int letra){
       int tipo = -1;
       
       if( numero < letra ){
           System.out.println("Empieza con numero");
           tipo = 1;
       }else{
           System.out.println("Empieza con letra");
           tipo = 2;
       }
   
       return tipo;
   }
   
    public int compararNumero2Letras(int numero, int letra1, int letra2) {
        int tipo = -1;

        //nun vs l1
        if ((numero < letra1)) {

            //inicia con numero
            if ((numero < letra2)) {
                System.out.println("inicia con numero");
                tipo = 1;
            }//inicia con letra
            else {
                System.out.println("inicia con letra");
                tipo = 2;
            }
        }//nun vs l2
        else if ((numero < letra2)) {

            //inicia con numero
            if ((numero < letra1)) {
                System.out.println("inicia con numero");
                tipo = 1;
            }//inicia con letra
            else {
                System.out.println("inicia con letra");
                tipo = 2;
            }
        } else {
            System.out.println("inicia con letra");
            tipo = 2;
        }

        return tipo;
    }
    
    public int compararLerta2Numeros(int letra, int num1, int num2) {
        int tipo = -1;

        //l vs num1
        if ((letra < num1)) {

            //inicia con letra
            if ((letra < num2)) {
                System.out.println("inicia con letra");
                tipo = 2;
            }//inicia con letra
            else {
                System.out.println("inicia con numero");
                tipo = 1;
            }
        }//l vs num2
        else if ((letra < num2)) {

            //inicia con letra
            if ((letra < num1)) {
                System.out.println("inicia con letra");
                tipo = 2;
            }//inicia con letra
            else {
                System.out.println("inicia con numero");
                tipo = 1;
            }
        } else {
            System.out.println("inicia con numero");
            tipo = 1;
        }

        return tipo;
    }

}
